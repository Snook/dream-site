<?php
require_once 'DAO/Menu.php';
require_once 'includes/DAO/BusinessObject/CMenuItem.php';
require_once 'includes/DAO/BusinessObject/CTimezones.php';
require_once 'DAO/Menu_to_menu_item.php';
require_once("DAO/Menu_item_inventory.php");

class CMenu extends DAO_Menu
{
	static private $curMenuId = null;
	public $menu_name_abbr;
	public $is_current_menu = false;
	public $menu_month;

	function __construct()
	{
		parent::__construct();
	}

	function fetch()
	{
		$rtn = parent::fetch(); // TODO: Change the autogenerated stub

		$this->expandData();

		return $rtn;
	}

	function expandData()
	{
		if (!empty($this->menu_name))
		{
			$this->menu_name_abbr = strtolower(date('M', strtotime($this->menu_name)));
			$this->menu_month = date('F', strtotime($this->menu_name));
		}

		$today = date('Y-m-d');
		if ($today >= $this->global_menu_start_date && $today <= $this->global_menu_end_date)
		{
			$this->is_current_menu = true;
		}
	}

	function isEnabled_Markup()
	{
		if ($this->id >= 265)
		{
			return false;
		}

		return true;
	}

	function isEnabled_MarkDown()
	{
		// Currently same rules as isEnabled_Markup()
		return $this->isEnabled_Markup();
	}

	function isEnabled_MarkupRoundUp()
	{
		// Currently same rules as isEnabled_Markup()
		return $this->isEnabled_Markup();
	}

	function isEnabled_Bundle_Fundraiser()
	{
		if ($this->id >= 265)
		{
			return false;
		}

		return true;
	}

	function isEnabled_Assembly_Fee()
	{
		if (is_null($this->id))
		{
			return true;
		}

		//less than April 2023
		if ($this->id < 260)
		{
			return true;
		}

		return false;
	}

	function isEnabled_OrderManager_Fundraiser()
	{
		// Currently same rules as isEnabled_Bundle_Fundraiser()
		return $this->isEnabled_Bundle_Fundraiser();
	}

	function isEnabled_Starter_Pack_Bundle()
	{
		if ($this->id >= 269)
		{
			return false;
		}

		return true;
	}

	function isEnabled_Starter_Pack($DAO_store)
	{
		if (!$this->isEnabled_Starter_Pack_Bundle())
		{
			return false;
		}

		if (!$DAO_store->storeSupportsIntroOrders())
		{
			return false;
		}

		// Stores opting out of starter pack starting with October 2023
		if ($this->id >= 266 && in_array($DAO_store->id, array(204, 103, 121, 96)))
		{
			return false;
		}

		return true;
	}

	static function getLastMenuID()
	{
		$DAO_menu = DAO_CFactory::create("menu");
		$DAO_menu->orderBy("menu.id DESC");
		$DAO_menu->limit(1);
		$DAO_menu->find(true);

		return $DAO_menu->id;
	}

	static function getCurrentMenuId()
	{
		if (self::$curMenuId === null)
		{
			$menuObj = new CMenu();
			$menuObj->query("SELECT id FROM menu WHERE now() < global_menu_end_date ORDER BY id LIMIT 1");
			$menuObj->fetch();
			self::$curMenuId = $menuObj->id;
		}

		return self::$curMenuId;
	}

	static function menuExists($menu_id)
	{
		$testObj = DAO_CFactory::create('menu');
		$testObj->id = $menu_id;
		$testObj->find();

		if ($testObj->N)
		{
			return true;
		}

		return false;
	}

	static function getAllMenus()
	{
		$menuArray = array();

		$menu = DAO_CFactory::create('menu');
		$menu->orderBy('id DESC');
		$menu->find();

		while ($menu->fetch())
		{
			$menuArray[$menu->id] = $menu->cloneObj();
		}

		return $menuArray;
	}

	/*
	 * For testing cart for validity
	 */
	static function isMenuIDCurrentInCustomerView($menu_id)
	{
		if (empty($menu_id))
		{
			return false;
		}

		$curMenu = self::getCurrentMenuId();

		if ($menu_id < $curMenu)
		{
			return false;
		}
		else if ($menu_id == $curMenu)
		{
			return true;
		}
		else
		{
			$DAOMenuTest = DAO_CFactory::create('menu');
			$DAOMenuTest->id = $menu_id;
			$DAOMenuTest->is_active = 1;
			$DAOMenuTest->find();

			if ($DAOMenuTest->N > 0)
			{
				return true;
			}
		}

		return false;
	}

	static function getMenuStartandInterval($menu_id = false, $date = false)
	{
		$menuObj = DAO_CFactory::create('menu');

		if ($menu_id)
		{
			$whereClause = 'where id = ' . $menu_id;
		}
		else if ($date)
		{
			// date should be year/month/1
			$menuObj->menu_start = $date;
			$whereClause = "where menu_start = '$date'";
		}
		else
		{
			return false;
		}

		$menuObj->query("select global_menu_start_date, DATEDIFF(global_menu_end_date, global_menu_start_date) + 1 as day_count from menu $whereClause");
		if ($menuObj->N == 0)
		{
			return false;
		}

		$menuObj->fetch();

		return array(
			$menuObj->global_menu_start_date,
			$menuObj->day_count
		);
	}

	static function storeSpecificMenuExists($menu_id, $store_id)
	{
		$testMenuToMenuItem = DAO_CFactory::create('menu_to_menu_item');
		$testMenuToMenuItem->store_id = $store_id;
		$testMenuToMenuItem->menu_id = $menu_id;

		return $testMenuToMenuItem->count() > 0;
	}

	static function getStorePricingForMenu($menu_id, $store_id)
	{
		$daoMenuItem = DAO_CFactory::create('menu_to_menu_item');
		$hasStoreMenu = false;
		if ($store_id)
		{
			$hasStoreMenu = self::storeSpecificMenuExists($menu_id, $store_id);
		}
		if ($hasStoreMenu)
		{
			$select = "SELECT menu_item.id AS item_id, menu_item.pricing_type, menu_item.entree_id, menu_item.price, menu_item.menu_item_category_id,
			menu_to_menu_item.override_price, menu_to_menu_item.is_visible FROM menu_to_menu_item ";
			$joins = "INNER JOIN  menu_item  ON menu_to_menu_item.menu_item_id=menu_item.id ";
			$where = "where menu_to_menu_item.store_id = $store_id and  menu_to_menu_item.menu_id = " . $menu_id . " AND menu_to_menu_item.is_deleted = 0 AND  menu_item.is_deleted = 0 ";
		}
		else
		{
			$select = "SELECT menu_item.id AS item_id, menu_item.pricing_type, menu_item.entree_id, menu_item.price
			 FROM menu_to_menu_item ";
			$joins = "INNER JOIN  menu_item  ON menu_to_menu_item.menu_item_id=menu_item.id ";
			$where = "where isnull(menu_to_menu_item.store_id) and  menu_to_menu_item.menu_id = " . $menu_id . " AND menu_to_menu_item.is_deleted = 0 AND  menu_item.is_deleted = 0 ";
		}
		$daoMenuItem->query($select . $joins . $where);
		$menuItemInfo = array();
		$storeObj = DAO_CFactory::create('store');
		$storeObj->id = $store_id;
		$markup = null;
		while ($daoMenuItem->fetch())
		{
			$price = 0;
			if (isset($daoMenuItem->override_price))
			{
				$price = $daoMenuItem->override_price;
			}
			else
			{
				if ($hasStoreMenu)
				{
					if (!isset($markup))
					{
						$markup = $storeObj->getMarkUpMultiObj($menu_id);
					}
					$price = CTemplate::moneyFormat(COrders::getItemMarkupMultiSubtotal($markup, $daoMenuItem, 1));
				}
				else
				{
					$price = $daoMenuItem->price;
				}
			}
			$menuItemInfo[$daoMenuItem->entree_id][$daoMenuItem->pricing_type] = $price;
		}

		return $menuItemInfo;
	}

	static function getWeeksArrayForMenu($menu_id)
	{
		$retVal = array();
		$templateArr = array(
			'week_start' => false,
			'week_end' => false,
			'menu_week_number' => false
		);

		$weekNumber = 1;

		$menuObj = DAO_CFactory::create('menu');
		$menuObj->id = $menu_id;
		$menuObj->find(true);

		$retVal[$weekNumber] = $templateArr;

		$dateDT = new DateTime($menuObj->global_menu_start_date);
		$endDT = new DateTime($menuObj->global_menu_end_date);
		$retVal[$weekNumber]['menu_week_number'] = $weekNumber;
		$retVal[$weekNumber]['week_start'] = $dateDT->format("Y-m-d H:i:s");
		$dateDT->modify('+7 days');
		$retVal[$weekNumber]['week_end'] = $dateDT->format("Y-m-d H:i:s");

		while ($dateDT->format('U') < $endDT->format('U'))
		{
			$weekNumber++;
			$retVal[$weekNumber]['menu_week_number'] = $weekNumber;
			$retVal[$weekNumber]['week_start'] = $dateDT->format("Y-m-d H:i:s");
			$dateDT->modify('+7 days');
			$retVal[$weekNumber]['week_end'] = $dateDT->format("Y-m-d H:i:s");
		}

		return $retVal;
	}

	/**
	 * Creates a CMenuItem object for fetching the items on this menu.
	 * The menu's id must be set before calling this function.
	 * @return CMenuItem
	 */
	function findMenuItemDAO($optionsArray = false)
	{
		if (empty($this->id) && empty($optionsArray['join_order_item_order_id']))
		{
			//throw new Exception('menu id must be set before creating a related menu item object.');
			echo 'Menu id OR join_order_item_order_id must be set before creating a related menu item object.';

			return null;
		}

		$defaultOptionsArray = array(
			// menu_item_id_list comma separated list of menu_item_ids
			'menu_item_id_list' => false,
			// menu_item_id_list comma separated list of menu_item_recipe_ids
			'menu_item_recipe_id_list' => false,
			'menu_item_pricing_type' => false,
			'menu_item_word_search' => false,
			'menu_to_menu_item_store_id' => null,
			'menu_to_menu_item_is_visible' => false,
			'exclude_menu_item_is_bundle' => false,
			'exclude_menu_item_category_core' => false,
			'exclude_menu_item_category_core_preassembled' => false,
			'exclude_menu_item_category_efl' => true,
			'exclude_menu_item_category_sides_sweets' => true,
			'exclude_menu_item_category_addons' => true,
			'exclude_menu_item_no_inventory' => false,
			// intro, dreamtaste, fundraiser bundle
			'join_bundle_to_menu_item_bundle_id' => false,
			'join_bundle_to_menu_item' => 'INNER',
			'join_pricing_to_menu_item' => 'LEFT',
			// join a specific user's meal ratings
			'join_food_survey_user_id' => false,
			// join order_item
			'join_order_item_order' => 'LEFT',
			'join_order_item_order_id' => false,
			'join_menu_item_inventory_week_projection' => false,
			// group by 'EntreeID'
			'groupBy' => false,
			'having' => false,
			// order by 'FeaturedFirst', 'NameAZ'
			'orderBy' => 'FeaturedFirst'
		);

		if (!empty($optionsArray))
		{
			$optionsArray = array_replace_recursive($defaultOptionsArray, $optionsArray);
		}
		else
		{
			$optionsArray = $defaultOptionsArray;
		}

		$DAO_menu_item = DAO_CFactory::create('menu_item', true);

		if (!empty($optionsArray['join_order_item_order_id']))
		{
			$DAO_order_item = DAO_CFactory::create('order_item', true);
			$DAO_order_item->whereAdd("order_id IN (" . implode(',', $optionsArray['join_order_item_order_id']) . ")");
			$DAO_booking = DAO_CFactory::create('booking', true);
			$DAO_booking->joinAddWhereAsOn(DAO_CFactory::create('session', true), $optionsArray['join_order_item_order']);
			$DAO_order_item->joinAddWhereAsOn($DAO_booking, $optionsArray['join_order_item_order']);
			$DAO_menu_item->joinAddWhereAsOn($DAO_order_item, $optionsArray['join_order_item_order']);

			$DAO_menu_item->selectAdd("GROUP_CONCAT(DISTINCT order_item.order_id) as order_ids");
		}

		$DAO_menu_to_menu_item = DAO_CFactory::create('menu_to_menu_item');
		if(!empty($this->id))
		{
			$DAO_menu_to_menu_item->menu_id = $this->id;
		}
		else if (!empty($optionsArray['join_order_item_order_id']))
		{
			$DAO_menu_to_menu_item->whereAdd("menu_to_menu_item.menu_id=session.menu_id");
		}

		$DAO_menu_to_menu_item->joinAddWhereAsOn(DAO_CFactory::create('menu'));

		if (!empty($optionsArray['menu_to_menu_item_store_id']) && is_numeric($optionsArray['menu_to_menu_item_store_id']))
		{
			$DAO_store = DAO_CFactory::create('store');
			$DAO_store->id = $optionsArray['menu_to_menu_item_store_id'];

			$DAO_mark_up_multi_find = DAO_CFactory::create('mark_up_multi');
			$DAO_mark_up_multi_find->store_id = $optionsArray['menu_to_menu_item_store_id'];

			if ($DAO_mark_up_multi_find->findActive($this->id))
			{
				$DAO_mark_up_multi_find->fetch();

				$DAO_mark_up_multi = DAO_CFactory::create('mark_up_multi');
				$DAO_mark_up_multi->id = $DAO_mark_up_multi_find->id;

				$DAO_store->joinAddWhereAsOn($DAO_mark_up_multi);
			}

			$DAO_menu_to_menu_item->joinAddWhereAsOn($DAO_store);
		}
		else if ($optionsArray['menu_to_menu_item_store_id'] == 'all')
		{
			$DAO_menu_to_menu_item->store_id = 'NULL';
		}
		else
		{
			$DAO_menu_to_menu_item->store_id = 'NULL';
		}

		if ($optionsArray['menu_to_menu_item_is_visible'])
		{
			$DAO_menu_to_menu_item->is_visible = 1;
		}

		$DAO_recipe = DAO_CFactory::create('recipe');
		$DAO_recipe->whereAdd('recipe.override_menu_id = menu_to_menu_item.menu_id');

		$DAO_recipe_component = DAO_CFactory::create('recipe_component');
		$DAO_nutrition_data = DAO_CFactory::create('nutrition_data');
		$DAO_nutrition_element = DAO_CFactory::create('nutrition_element');
		$DAO_nutrition_data->joinAddWhereAsOn($DAO_nutrition_element, 'LEFT', false, false, false);
		$DAO_recipe_component->joinAddWhereAsOn($DAO_nutrition_data, 'LEFT', false, false, false);
		// this will be decoded in CMenuItem::digestMenuItem()
		$DAO_menu_item->selectAdd("GROUP_CONCAT(DISTINCT recipe_component.component_number, ':::' , recipe_component.serving, ':::' , recipe_component.notes SEPARATOR '|||') AS _recipe_component");
		$DAO_menu_item->selectAdd("GROUP_CONCAT(DISTINCT nutrition_data.component_number, ':' , nutrition_data.value, ':' , IFNULL(nutrition_data.note_indicator, 'null'), ':' , nutrition_data.prefix, ':' , nutrition_element.label, ':' , nutrition_element.display_label, ':' , IFNULL(nutrition_element.measure_label, 'null'), ':' , IFNULL(nutrition_element.daily_value, 'null'), ':' , nutrition_element.do_display, ':' , IFNULL(nutrition_element.parent_element, 'null'), ':' , IFNULL(nutrition_element.sprintf, 'null'), ':' , nutrition_element.indent ORDER BY nutrition_element.display_order ASC) AS _recipe_component_nutrition_data");

		$DAO_recipe->joinAddWhereAsOn($DAO_recipe_component, 'LEFT', false, false, false);

		// Legacy selects
		$DAO_menu_item->selectAdd('menu_item_category.category_type as category');
		$DAO_menu_item->selectAdd('menu_item_category.display_title as category_display_title');
		$DAO_menu_item->selectAdd('menu_to_menu_item.menu_id');
		$DAO_menu_item->selectAdd('menu_to_menu_item.store_id');
		$DAO_menu_item->selectAdd('menu_to_menu_item.menu_order_value');
		$DAO_menu_item->selectAdd('menu_to_menu_item.featuredItem');
		$DAO_menu_item->selectAdd('menu_to_menu_item.show_on_pick_sheet');
		$DAO_menu_item->selectAdd('menu_to_menu_item.show_on_order_form');
		$DAO_menu_item->selectAdd('menu_to_menu_item.override_price');
		$DAO_menu_item->selectAdd('menu_to_menu_item.is_visible');
		$DAO_menu_item->selectAdd('menu_to_menu_item.is_hidden_everywhere');
		$DAO_menu_item->selectAdd('IFNULL(recipe.version, 1) AS recipe_version');
		$DAO_menu_item->selectAdd("CONCAT(menu_item.recipe_id, '-', IFNULL(recipe.version, 1)) AS element_id");
		$DAO_menu_item->selectAdd('recipe.ltd_menu_item_value');

		if ($optionsArray['exclude_menu_item_is_bundle'])
		{
			$DAO_menu_item->is_bundle = 0;
		}

		if ($optionsArray['menu_item_word_search'])
		{
			$DAO_menu_item->whereAdd("(menu_item.menu_item_name LIKE '%" . addslashes($optionsArray['menu_item_word_search']) . "%' OR menu_item.menu_item_description LIKE '%" . addslashes($optionsArray['menu_item_word_search']) . "%')");
		}

		$DAO_menu_item->joinAddWhereAsOn($DAO_menu_to_menu_item);
		$DAO_menu_item->joinAddWhereAsOn($DAO_recipe);
		$DAO_menu_item->joinAddWhereAsOn(DAO_CFactory::create('menu_item_category'));

		if ($optionsArray['join_bundle_to_menu_item_bundle_id'])
		{
			$DAO_bundle_to_menu_item = DAO_CFactory::create('bundle_to_menu_item');
			$DAO_bundle_to_menu_item->whereAdd("bundle_to_menu_item.bundle_id = '" . $optionsArray['join_bundle_to_menu_item_bundle_id'] . "'");
			$DAO_bundle_to_menu_item->joinAddWhereAsOn(DAO_CFactory::create('bundle_to_menu_item_group'), 'LEFT');
			$DAO_bundle_to_menu_item->joinAddWhereAsOn(DAO_CFactory::create('bundle'), 'LEFT');

			$DAO_menu_item->joinAddWhereAsOn($DAO_bundle_to_menu_item, $optionsArray['join_bundle_to_menu_item']);
		}

		// join bundle master_item to menu_item
		$DAO_bundle = DAO_CFactory::create('bundle');
		$DAO_bundle->bundle_type = CBundle::MASTER_ITEM;
		$DAO_menu_item->joinAddWhereAsOn($DAO_bundle, 'LEFT', 'master_item_bundle');

		// add array of bundles the item is included in
		$DAO_bundle = DAO_CFactory::create('bundle');
		$DAO_bundle->whereAdd("in_bundle_bundle.id=in_bundle_bundle_to_menu_item.bundle_id");
		$DAO_bundle_to_menu_item = DAO_CFactory::create('bundle_to_menu_item');
		$DAO_bundle_to_menu_item->joinAddWhereAsOn($DAO_bundle, array(
			'joinType' => 'LEFT',
			'useLinks' => false
		), 'in_bundle_bundle', false, false);
		$DAO_menu_item->joinAddWhereAsOn($DAO_bundle_to_menu_item, 'LEFT', 'in_bundle_bundle_to_menu_item', false, false);
		// this will be decoded in CMenuItem::digestMenuItem()
		$DAO_menu_item->selectAdd("GROUP_CONCAT(DISTINCT in_bundle_bundle.id, ':' , in_bundle_bundle.bundle_type, ':' , IF(in_bundle_bundle.master_menu_item, in_bundle_bundle.master_menu_item, 'null')) as _in_bundle");

		if (!empty($optionsArray['menu_to_menu_item_store_id']))
		{
			//INVENTORY TOUCH POINT 1
			$DAO_menu_item_inventory = DAO_CFactory::create('menu_item_inventory');
			$DAO_menu_item_inventory->whereAdd('menu_item_inventory.store_id = menu_to_menu_item.store_id');
			$DAO_menu_item_inventory->whereAdd('menu_item_inventory.menu_id = menu_to_menu_item.menu_id');

			$DAO_menu_item->selectAdd('menu_item_inventory.initial_inventory');
			$DAO_menu_item->selectAdd('menu_item_inventory.override_inventory');
			$DAO_menu_item->selectAdd('menu_item_inventory.number_sold');
			$DAO_menu_item->selectAdd('menu_item_inventory.sales_mix as store_sales_mix');

			if ($optionsArray['join_menu_item_inventory_week_projection'])
			{
				$DAO_menu_item->selectAdd('menu_item_inventory.week1_projection');
				$DAO_menu_item->selectAdd('menu_item_inventory.week2_projection');
				$DAO_menu_item->selectAdd('menu_item_inventory.week3_projection');
				$DAO_menu_item->selectAdd('menu_item_inventory.week4_projection');
				$DAO_menu_item->selectAdd('menu_item_inventory.week5_projection');
			}

			$DAO_menu_item->selectAdd('menu_item_mark_down.id as markdown_id');
			$DAO_menu_item->selectAdd('menu_item_mark_down.markdown_value');

			$DAO_menu_item_mark_down = DAO_CFactory::create('menu_item_mark_down');
			$DAO_menu_item_mark_down->whereAdd('menu_item_mark_down.store_id = menu_to_menu_item.store_id');

			$DAO_menu_item->joinAddWhereAsOn($DAO_menu_item_inventory);
			$DAO_menu_item->joinAddWhereAsOn($DAO_menu_item_mark_down, 'LEFT');

			// This store specific pricing tier info
			$DAO_pricing = DAO_CFactory::create('pricing', true);
			$DAO_pricing->whereAdd("pricing.menu_id=menu_to_menu_item.menu_id");
			$DAO_pricing->whereAdd("pricing.recipe_id=menu_item.recipe_id");
			$DAO_pricing->whereAdd("pricing.tier=store.core_pricing_tier");
			$DAO_menu_item->joinAddWhereAsOn($DAO_pricing, $optionsArray['join_pricing_to_menu_item']);

			// Concat all pricing tier info for this item
			$DAO_pricing_tiers = DAO_CFactory::create('pricing', true);
			$DAO_pricing_tiers->whereAdd("pricing_tiers.menu_id=menu_to_menu_item.menu_id");
			$DAO_pricing_tiers->whereAdd("pricing_tiers.recipe_id=menu_item.recipe_id");

			$DAO_menu_item->joinAddWhereAsOn($DAO_pricing_tiers, $optionsArray['join_pricing_to_menu_item'], 'pricing_tiers', false, false);
			// this will be decoded in CMenuItem::digestMenuItem()
			$DAO_menu_item->selectAdd("GROUP_CONCAT(DISTINCT pricing_tiers.id, ':' , pricing_tiers.menu_id, ':' , pricing_tiers.recipe_id, ':' , pricing_tiers.pricing_type, ':' , pricing_tiers.tier, ':' , pricing_tiers.price) as _pricing_tiers");
		}

		if ($optionsArray['join_food_survey_user_id'] || !empty($optionsArray['join_order_item_order_id']))
		{
			$DAO_food_survey_comments = DAO_CFactory::create('food_survey_comments');
			$DAO_food_survey_comments->is_active = 1;
			if (!empty($optionsArray['join_order_item_order_id']))
			{
				$DAO_food_survey_comments->whereAdd('food_survey_comments.user_id = booking.user_id');
			}
			else
			{
				$DAO_food_survey_comments->user_id = $optionsArray['join_food_survey_user_id'];
			}
			$DAO_food_survey_comments->whereAdd('food_survey_comments.recipe_version = recipe.version');

			$DAO_food_survey = DAO_CFactory::create('food_survey');
			$DAO_food_survey->is_active = 1;
			if (!empty($optionsArray['join_order_item_order_id']))
			{
				$DAO_food_survey->whereAdd('food_survey.user_id = booking.user_id');
			}
			else
			{
				$DAO_food_survey->user_id = $optionsArray['join_food_survey_user_id'];
			}
			$DAO_food_survey->whereAdd('food_survey.recipe_version = recipe.version');

			// 'favorite' added for old references
			$DAO_menu_item->selectAdd('food_survey.would_order_again as favorite');

			$DAO_menu_item->joinAddWhereAsOn($DAO_food_survey_comments, 'LEFT');
			$DAO_menu_item->joinAddWhereAsOn($DAO_food_survey, 'LEFT');
		}

		if ($optionsArray['menu_item_id_list'])
		{
			$DAO_menu_item->whereAdd("menu_item.id in (" . $optionsArray['menu_item_id_list'] . ")");
		}

		if ($optionsArray['menu_item_recipe_id_list'])
		{
			$DAO_menu_item->whereAdd("menu_item.recipe_id in (" . $optionsArray['menu_item_recipe_id_list'] . ")");
		}

		if ($optionsArray['menu_item_pricing_type'])
		{
			$DAO_menu_item->whereAdd("menu_item.pricing_type = '" . $optionsArray['menu_item_pricing_type'] . "'");
		}

		if ($optionsArray['exclude_menu_item_category_addons'])
		{
			$DAO_menu_item->whereAdd("NOT menu_item.menu_item_category_id = 7");
		}
		//allow
		if ($optionsArray['exclude_menu_item_category_core_preassembled'])
		{
			$DAO_menu_item->whereAdd("NOT ((menu_item.menu_item_category_id = 4 AND menu_item.is_store_special = 0))");
			if ($optionsArray['exclude_menu_item_category_core'])
			{
				$DAO_menu_item->whereAdd("NOT (menu_item.menu_item_category_id = 1)");
			}
		}
		else
		{
			if ($optionsArray['exclude_menu_item_category_core'])
			{
				$DAO_menu_item->whereAdd("NOT (menu_item.menu_item_category_id = 1 OR (menu_item.menu_item_category_id = 4 AND menu_item.is_store_special = 0))");
			}
		}

		if ($optionsArray['exclude_menu_item_category_efl'])
		{
			$DAO_menu_item->whereAdd("NOT (menu_item.menu_item_category_id = 4 AND menu_item.is_store_special = 1)");
		}

		if ($optionsArray['exclude_menu_item_category_sides_sweets'])
		{
			$DAO_menu_item->whereAdd("NOT menu_item.menu_item_category_id = 9");
		}

		if ($optionsArray['exclude_menu_item_no_inventory'])
		{
			$DAO_menu_item->whereAdd("(menu_item_inventory.override_inventory -  menu_item_inventory.number_sold) > 0");
		}

		if ($optionsArray['groupBy'] == 'EntreeID')
		{
			$DAO_menu_item->groupBy("menu_item.entree_id");
		}
		else if ($optionsArray['groupBy'] == 'RecipeID')
		{
			$DAO_menu_item->groupBy("menu_item.recipe_id");
		}
		else if (!empty($optionsArray['groupBy']))
		{
			$DAO_menu_item->groupBy($optionsArray['groupBy']);
		}
		else
		{
			$DAO_menu_item->groupBy("menu_item.id");
		}

		if ($optionsArray['having'])
		{
			$DAO_menu_item->having($optionsArray['having']);
		}

		$DAO_menu_item->orderBy($optionsArray['orderBy']);

		$DAO_menu_item->find();

		return $DAO_menu_item;
	}

	/**
	 * @deprecated getMenuItemDAO() has been changed to object findMenuItemDAO()
	 *
	 * object setup helper for migration
	 *
	 */
	function getMenuItemDAO($order_by = 'FeaturedFirst', $storeID = false, $pricingType = false, $groupByEntreeID = false, $excludeAddons = true, $excludeChefTouchedSelections = true, $excludeStoreSpecialsIfMenuIsGlobal = true, $joinUsersFavoritesFlag = false, $inItemList = false, $excludeCoreMenuItems = false, $retrieveWeeklyProjections = false, $visibleOnly = false)
	{
		$defaultOptionsArray = array(
			'menu_item_id_list' => $inItemList,
			// comma separated list of menu_item_ids
			'menu_item_pricing_type' => $pricingType,
			'menu_to_menu_item_store_id' => $storeID,
			'menu_to_menu_item_is_visible' => $visibleOnly,
			'exclude_menu_item_category_core' => $excludeCoreMenuItems,
			'exclude_menu_item_category_efl' => $excludeStoreSpecialsIfMenuIsGlobal,
			'exclude_menu_item_category_sides_sweets' => $excludeChefTouchedSelections,
			'exclude_menu_item_category_addons' => $excludeAddons,
			'join_food_survey_user_id' => $joinUsersFavoritesFlag,
			'join_menu_item_inventory_week_projection' => $retrieveWeeklyProjections,
			'groupBy' => $groupByEntreeID,
			'orderBy' => $order_by
		);

		return $this->findMenuItemDAO($defaultOptionsArray);
	}

	/**
	 * @param $menu_select can be a menu id or 'next' for next month's menu
	 *
	 * @return array(    $menuOptions[id]['menu_name']
	 *                    $menuOptions[id]['startdate']
	 *                    $menuOptions[id]['enddate'],
	 *                    $menuItemInfo
	 */
	public static function buildPreviewMenuArray($storeObj = null, $menu_select = null, $order_by = 'FeaturedFirst')
	{
		//fetch the menu for the month
		$daoMenu = DAO_CFactory::create('menu');

		if (is_numeric($menu_select))
		{
			$daoMenu->id = $menu_select;
			$cnt = $daoMenu->find(true);
		}
		else
		{
			$cnt = $daoMenu->findCurrentByDate($menu_select === 'next');
			$daoMenu->fetch();
		}

		if ($cnt == 0)
		{
			throw new Exception('error: menu not found');
		}

		if ($cnt > 1)
		{
			CLog::Record('E_ERROR: more than one menu result for this month');
		}

		$daoMenuItem = $daoMenu->getMenuItemDAO($order_by, false, CMenuItem::FULL); //returns the associated menu item query

		$menuItemInfo = array(
			'menu_id' => $daoMenu->id,
			'menu_name' => $daoMenu->menu_name,
			'menu_name_abbr' => $daoMenu->menu_name_abbr,
			'menu_month' => strftime('%B', strtotime($daoMenu->menu_start)),
			'menu_items' => array()
		);

		while ($daoMenuItem->fetch())
		{

			// hide the Test store only items
			if ($menu_select == 247 && in_array($daoMenuItem->recipe_id, array(
					11108,
					10212,
					946,
					10903,
					10174,
					10324,
					10754,
					1083,
					10070,
					1087,
					10822
				)))
			{
				continue;
			}
			// hide the Test store only items
			if ($menu_select >= 248 && $daoMenuItem->recipe_id > 10000)
			{
				continue;
			}

			// hide bundles
			if (!empty($daoMenuItem->is_bundle))
			{
				continue;
			}

			$menuItemInfo['menu_items'][$daoMenuItem->id] = array(
				'id' => $daoMenuItem->id,
				'recipe_id' => $daoMenuItem->recipe_id,
				'menu_item_name' => $daoMenuItem->menu_item_name,
				'menu_item_description' => $daoMenuItem->menu_item_description,
				'menu_image_override' => $daoMenuItem->menu_image_override,
				'display_description' => stripslashes($daoMenuItem->menu_item_description),
				'is_featured' => $daoMenuItem->featuredItem,
				'base_price' => $daoMenuItem->price,
				'pricing_type' => $daoMenuItem->pricing_type,
				'entree_id' => $daoMenuItem->entree_id,
				'icons' => $daoMenuItem->icons
			);
		}

		return $menuItemInfo;
	}

	static function getFutureFTPickups($storeID)
	{
		$tempStoreObj = DAO_CFactory::create('store');
		$tempStoreObj->query("select id, timezone_id from store where id = $storeID");
		$tempStoreObj->fetch();
		$now = date("Y-m-d H:i:s", CTimezones::getAdjustedServerTimeWithTimeZoneID($tempStoreObj->timezone_id));
		$orderItemsDAO = DAO_CFactory::create('order_item');
		$orderItemsDAO->query("select mi.recipe_id, sum(oi.item_count) as item_count from session s
				join booking b on b.session_id = s.id and b.`status` = 'ACTIVE'
				join order_item oi on oi.order_id = b.order_id and oi.is_deleted = 0 and oi.inventory_was_processed = 0
				join menu_item mi on oi.menu_item_id = mi.id and menu_item_category_id = 9
				where s.session_start > '$now' and s.store_id = $storeID
				group by mi.recipe_id");
		$tempArray = array();
		while ($orderItemsDAO->fetch())
		{
			$tempArray[$orderItemsDAO->recipe_id] = $orderItemsDAO->item_count;
		}

		return $tempArray;
	}

	static function getFutureFTPickupsPerItem($storeID, $recipeID)
	{
		$tempStoreObj = DAO_CFactory::create('store');
		$tempStoreObj->query("select id, timezone_id from store where id = $storeID");
		$tempStoreObj->fetch();
		$now = date("Y-m-d H:i:s", CTimezones::getAdjustedServerTimeWithTimeZoneID($tempStoreObj->timezone_id));
		$orderItemsDAO = DAO_CFactory::create('order_item');
		$orderItemsDAO->query("select mi.recipe_id, sum(oi.item_count) as item_count from session s
				join booking b on b.session_id = s.id and b.`status` = 'ACTIVE'
				join order_item oi on oi.order_id = b.order_id and oi.is_deleted = 0
				join menu_item mi on oi.menu_item_id = mi.id and mi.menu_item_category_id = 9 and mi.recipe_id = $recipeID
				where s.session_start > '$now' and s.store_id = $storeID
				group by mi.recipe_id");
		$retVal = 0;
		if ($orderItemsDAO->fetch())
		{
			$retVal = $orderItemsDAO->item_count;
		}

		return $retVal;
	}

	/**
	 * Build TODD Menu array for session menu selection
	 */
	static function getTODDMenuMenbuItemIDsForSession($session_id)
	{
		$session_to_menu_item = DAO_CFactory::create('session_to_menu_item');
		$select = "SELECT stmi.menu_item_id FROM session_to_menu_item stmi ";
		$where = " where stmi.session_id = $session_id and stmi.is_deleted = 0";
		$session_to_menu_item->query($select . $where);
		$ItemsIDs = array();
		while ($session_to_menu_item->fetch())
		{
			$ItemsIDs[$session_to_menu_item->menu_item_id] = $session_to_menu_item->menu_item_id;
		}

		return $ItemsIDs;
	}

	/**
	 * Build Menu Addon array for drop down
	 */
	static function buildMenuAddonArray($storeObj, $menu_id, $overrideStoreSpecificMenu = false)
	{
		$daoMenu = DAO_CFactory::create('menu');
		$daoMenu->id = $menu_id;

		$getStoreMenu = self::storeSpecificMenuExists($menu_id, $storeObj->id);

		// during the creation of the store specific menu we need to get the addons from the global menu even though a store specific menu for the other categories already exists
		if ($getStoreMenu && !$overrideStoreSpecificMenu)
		{
			$daoMenuItem = $daoMenu->findMenuItemDAO(array(
				'menu_to_menu_item_store_id' => $storeObj->id,
				'exclude_menu_item_category_addons' => false,
				'exclude_menu_item_category_core' => true,
				'exclude_menu_item_category_efl' => true,
				'exclude_menu_item_category_sides_sweets' => true
			));
		}
		else
		{
			$daoMenuItem = $daoMenu->findMenuItemDAO(array(
				'exclude_menu_item_category_addons' => false,
				'exclude_menu_item_category_core' => true,
				'exclude_menu_item_category_efl' => true,
				'exclude_menu_item_category_sides_sweets' => true
			));
		}
		$menuItemInfo = array();
		$markup = null;

		while ($daoMenuItem->fetch())
		{
			$i = $daoMenuItem->id;
			$menuItemInfo[$daoMenuItem->category][$i] = array();
			$menuItemInfo[$daoMenuItem->category][$i]['id'] = $i;
			$menuItemInfo[$daoMenuItem->category][$i]['menu_item_name'] = $daoMenuItem->menu_item_name;
			$menuItemInfo[$daoMenuItem->category][$i]['display_title'] = (strlen($daoMenuItem->menu_item_name) > 50 ? substr($daoMenuItem->menu_item_name, 0, 50) . "..." : $daoMenuItem->menu_item_name);
			$menuItemInfo[$daoMenuItem->category][$i]['display_description'] = stripslashes($daoMenuItem->menu_item_description);
			$menuItemInfo[$daoMenuItem->category][$i]['menu_item_description'] = $daoMenuItem->menu_item_description;
			$menuItemInfo[$daoMenuItem->category][$i]['is_featured'] = $daoMenuItem->featuredItem;
			$menuItemInfo[$daoMenuItem->category][$i]['base_price'] = $daoMenuItem->price;
			$menuItemInfo[$daoMenuItem->category][$i]['is_side_dish'] = $daoMenuItem->is_side_dish;
			$menuItemInfo[$daoMenuItem->category][$i]['is_kids_choice'] = $daoMenuItem->is_kids_choice;
			$menuItemInfo[$daoMenuItem->category][$i]['is_menu_addon'] = $daoMenuItem->is_menu_addon;
			$menuItemInfo[$daoMenuItem->category][$i]['is_chef_touched'] = $daoMenuItem->is_chef_touched;
			$menuItemInfo[$daoMenuItem->category][$i]['is_bundle'] = $daoMenuItem->is_bundle;
			$menuItemInfo[$daoMenuItem->category][$i]['is_preassembled'] = $daoMenuItem->is_preassembled;
			$menuItemInfo[$daoMenuItem->category][$i]['ltd_menu_item_value'] = $daoMenuItem->ltd_menu_item_value;
			$menuItemInfo[$daoMenuItem->category][$i]['pricing_type'] = $daoMenuItem->pricing_type;
			$menuItemInfo[$daoMenuItem->category][$i]['servings_per_item'] = $daoMenuItem->servings_per_item;
			$menuItemInfo[$daoMenuItem->category][$i]['item_count_per_item'] = $daoMenuItem->item_count_per_item;
			$menuItemInfo[$daoMenuItem->category][$i]['entree_id'] = $daoMenuItem->entree_id;
			$menuItemInfo[$daoMenuItem->category][$i]['is_optional'] = $daoMenuItem->is_optional;
			$menuItemInfo[$daoMenuItem->category][$i]['excluded'] = isset($daoMenuItem->excluded) ? true : false;
			// addons are not currently in use ... but provide default numbers in case it is
			$menuItemInfo[$daoMenuItem->category][$i]['initial_inventory'] = 9999;
			$menuItemInfo[$daoMenuItem->category][$i]['override_inventory'] = 9999;
			$menuItemInfo[$daoMenuItem->category][$i]['number_sold'] = 0;
			// is_visible will only be set if we are obtaining a store specific menu
			// if not set it should dedault to true
			if (isset($daoMenuItem->is_visible))
			{
				$menuItemInfo[$daoMenuItem->category][$i]['is_visible'] = $daoMenuItem->is_visible ? true : false;
			}
			else
			{
				$menuItemInfo[$daoMenuItem->category][$i]['is_visible'] = true;
			}
			$menuItemInfo[$daoMenuItem->category][$i]['is_price_controllable'] = $daoMenuItem->is_price_controllable;
			$menuItemInfo[$daoMenuItem->category][$i]['is_visibility_controllable'] = $daoMenuItem->is_visibility_controllable;
			$menuItemInfo[$daoMenuItem->category][$i]['override_price'] = isset($daoMenuItem->override_price) ? $daoMenuItem->override_price : null;
			if (isset($daoMenuItem->override_price))
			{
				$menuItemInfo[$daoMenuItem->category][$i]['price'] = $daoMenuItem->override_price;
			}
			else
			{
				if (isset($storeObj) && $storeObj)
				{
					if (!isset($markup))
					{
						$markup = $storeObj->getMarkUpMultiObj($menu_id);
					}
					$menuItemInfo[$daoMenuItem->category][$i]['price'] = CTemplate::moneyFormat(COrders::getItemMarkupMultiSubtotal($markup, $daoMenuItem, 1));
				}
			}
		}
		if (!empty($menuItemInfo['Add-on Items']))
		{
			return $menuItemInfo['Add-on Items'];
		}

		return array();
	}

	/**
	 * Build Chef Touched Selections
	 */
	static function buildCTSArray($storeObj, $menu_id, $overrideMarkup = null)
	{
		$daoMenu = DAO_CFactory::create('menu');
		$daoMenu->id = $menu_id;

		$daoMenuItem = $daoMenu->findMenuItemDAO(array(
			'menu_to_menu_item_store_id' => $storeObj->id,
			'exclude_menu_item_category_core' => true,
			'exclude_menu_item_category_efl' => true,
			'exclude_menu_item_category_sides_sweets' => false
		));

		$menuItemInfo = array();

		while ($daoMenuItem->fetch())
		{
			$menuItemInfo[$daoMenuItem->category][$daoMenuItem->id] = $daoMenuItem->buildMenuItemArray($storeObj, $overrideMarkup);
		}

		if (!empty($menuItemInfo['Chef Touched Selections']))
		{
			return $menuItemInfo['Chef Touched Selections'];
		}

		return array();
	}

	/**
	 * Build Chef Touched Selections
	 */
	static function buildExtendedFastLaneArray($storeObj, $menu_id, $overrideStoreSpecificMenu = false)
	{
		$daoMenu = DAO_CFactory::create('menu');
		$daoMenu->id = $menu_id;

		$getStoreMenu = self::storeSpecificMenuExists($menu_id, $storeObj->id);

		if ($getStoreMenu && !$overrideStoreSpecificMenu)
		{
			$daoMenuItem = $daoMenu->findMenuItemDAO(array(
				'menu_to_menu_item_store_id' => $storeObj->id,
				'exclude_menu_item_category_core' => true,
				'exclude_menu_item_category_efl' => false,
				'exclude_menu_item_category_sides_sweets' => true
			));
		}
		else
		{
			$daoMenuItem = $daoMenu->findMenuItemDAO(array(
				'exclude_menu_item_category_core' => true,
				'exclude_menu_item_category_efl' => false,
				'exclude_menu_item_category_sides_sweets' => true
			));
		}

		$menuItemInfo = array();
		$markup = null;
		while ($daoMenuItem->fetch())
		{
			$i = $daoMenuItem->id;
			$menuItemInfo[$daoMenuItem->category][$i] = array();
			$menuItemInfo[$daoMenuItem->category][$i]['id'] = $i;
			$menuItemInfo[$daoMenuItem->category][$i]['is_efl_item'] = true;
			$menuItemInfo[$daoMenuItem->category][$i]['category_id'] = $daoMenuItem->menu_item_category_id;
			$menuItemInfo[$daoMenuItem->category][$i]['menu_item_name'] = $daoMenuItem->menu_item_name;
			$menuItemInfo[$daoMenuItem->category][$i]['display_title'] = (strlen($daoMenuItem->menu_item_name) > 50 ? substr($daoMenuItem->menu_item_name, 0, 50) . "..." : $daoMenuItem->menu_item_name);
			$menuItemInfo[$daoMenuItem->category][$i]['display_description'] = stripslashes($daoMenuItem->menu_item_description);
			$menuItemInfo[$daoMenuItem->category][$i]['is_featured'] = $daoMenuItem->featuredItem;
			$menuItemInfo[$daoMenuItem->category][$i]['base_price'] = $daoMenuItem->price;
			$menuItemInfo[$daoMenuItem->category][$i]['is_side_dish'] = $daoMenuItem->is_side_dish;
			$menuItemInfo[$daoMenuItem->category][$i]['is_kids_choice'] = $daoMenuItem->is_kids_choice;
			$menuItemInfo[$daoMenuItem->category][$i]['is_menu_addon'] = $daoMenuItem->is_menu_addon;
			$menuItemInfo[$daoMenuItem->category][$i]['is_chef_touched'] = $daoMenuItem->is_chef_touched;
			$menuItemInfo[$daoMenuItem->category][$i]['is_bundle'] = $daoMenuItem->is_bundle;
			$menuItemInfo[$daoMenuItem->category][$i]['is_store_special'] = $daoMenuItem->is_store_special;
			$menuItemInfo[$daoMenuItem->category][$i]['is_preassembled'] = $daoMenuItem->is_preassembled;
			$menuItemInfo[$daoMenuItem->category][$i]['pricing_type'] = $daoMenuItem->pricing_type;
			$menuItemInfo[$daoMenuItem->category][$i]['pricing_type_info'] = $daoMenuItem->pricing_type_info;
			$menuItemInfo[$daoMenuItem->category][$i]['servings_per_item'] = $daoMenuItem->servings_per_item;
			$menuItemInfo[$daoMenuItem->category][$i]['item_count_per_item'] = $daoMenuItem->item_count_per_item;
			$menuItemInfo[$daoMenuItem->category][$i]['entree_id'] = $daoMenuItem->entree_id;
			$menuItemInfo[$daoMenuItem->category][$i]['is_optional'] = $daoMenuItem->is_optional;
			$menuItemInfo[$daoMenuItem->category][$i]['excluded'] = isset($daoMenuItem->excluded) ? true : false;
			$menuItemInfo[$daoMenuItem->category][$i]['initial_inventory'] = isset($daoMenuItem->initial_inventory) ? $daoMenuItem->initial_inventory : 9999;
			$menuItemInfo[$daoMenuItem->category][$i]['override_inventory'] = isset($daoMenuItem->override_inventory) ? $daoMenuItem->override_inventory : 9999;
			$menuItemInfo[$daoMenuItem->category][$i]['number_sold'] = isset($daoMenuItem->number_sold) ? $daoMenuItem->number_sold : 0;
			$menuItemInfo[$daoMenuItem->category][$i]['recipe_id'] = $daoMenuItem->recipe_id;
			$menuItemInfo[$daoMenuItem->category][$i]['subcategory_label'] = $daoMenuItem->subcategory_label;
			$menuItemInfo[$daoMenuItem->category][$i]['show_on_pick_sheet'] = !empty($daoMenuItem->show_on_pick_sheet) ? 1 : 0;
			$menuItemInfo[$daoMenuItem->category][$i]['markdown_id'] = !empty($daoMenuItem->markdown_id) ? $daoMenuItem->markdown_id : false;
			$menuItemInfo[$daoMenuItem->category][$i]['markdown_value'] = !empty($daoMenuItem->markdown_value) ? $daoMenuItem->markdown_value : 0;

			// is_visible will only be set if we are obtaining a store specific menu
			// if not set it should dedault to true
			if (isset($daoMenuItem->is_visible))
			{
				$menuItemInfo[$daoMenuItem->category][$i]['is_visible'] = $daoMenuItem->is_visible ? true : false;
			}
			else
			{
				$menuItemInfo[$daoMenuItem->category][$i]['is_visible'] = false;
			}
			if (isset($daoMenuItem->is_hidden_everywhere))
			{
				$menuItemInfo[$daoMenuItem->category][$i]['is_hidden_everywhere'] = $daoMenuItem->is_hidden_everywhere ? true : false;
			}
			else
			{
				$menuItemInfo[$daoMenuItem->category][$i]['is_hidden_everywhere'] = false;
			}
			$menuItemInfo[$daoMenuItem->category][$i]['is_price_controllable'] = $daoMenuItem->is_price_controllable;
			$menuItemInfo[$daoMenuItem->category][$i]['is_visibility_controllable'] = $daoMenuItem->is_visibility_controllable;
			$menuItemInfo[$daoMenuItem->category][$i]['override_price'] = isset($daoMenuItem->override_price) ? $daoMenuItem->override_price : null;
			if (isset($daoMenuItem->override_price))
			{
				$menuItemInfo[$daoMenuItem->category][$i]['price'] = $daoMenuItem->override_price;
			}
			else
			{
				if (isset($storeObj) && $storeObj)
				{
					if (!isset($markup))
					{
						$markup = $storeObj->getMarkUpMultiObj($menu_id);
					}
					$menuItemInfo[$daoMenuItem->category][$i]['price'] = CTemplate::moneyFormat(COrders::getItemMarkupMultiSubtotal($markup, $daoMenuItem, 1));
				}
			}

			if ($menuItemInfo[$daoMenuItem->category][$i]['markdown_id'])
			{
				$percentage = $menuItemInfo[$daoMenuItem->category][$i]['markdown_value'] / 100;

				$menuItemInfo[$daoMenuItem->category][$i]['price'] -= COrders::std_round(($menuItemInfo[$daoMenuItem->category][$i]['price'] * $percentage));
			}
		}
		if (!empty($menuItemInfo['Fast Lane']))
		{
			return $menuItemInfo['Fast Lane'];
		}

		return array();
	}

	function findCurrent($nextMonth = false)
	{
		$current_year = date("Y");
		$current_month = date("m");
		$current_date = mktime(0, 0, 0, $current_month, 1, $current_year);
		$current_date_sql = date("Y-m-d", $current_date);
		if (!$nextMonth)
		{
			$this->whereAdd(" menu_start = DATE('$current_date_sql') ");
		}
		else
		{
			$this->whereAdd(" menu_start = DATE_ADD('$current_date_sql',INTERVAL 1 MONTH) ");
		}

		return $this->find();
	}

	function findCurrentByDate($nextMonth = false)
	{
		$today = date('Y-m-d');
		if ($nextMonth)
		{
			$this->query("select * from menu where DATE(global_menu_end_date) >= '$today' and is_deleted = 0 and is_active = 1 order by global_menu_end_date asc limit 1, 1");
		}
		else
		{
			$this->query("select * from menu where DATE(global_menu_end_date) >= '$today' and is_deleted = 0 and is_active = 1 order by global_menu_end_date asc limit 1");
		}

		return $this->N;
	}

	function areSessionsOrdersEditable($storeObj = false, $timezone_id = false)
	{

		if ($storeObj)
		{
			$adjustedServerTime = CTimezones::getAdjustedServerTimeWithTimeZoneID($storeObj->timezone_id);
		}
		else
		{
			$adjustedServerTime = CTimezones::getAdjustedServerTimeWithTimeZoneID($timezone_id);
		}

		// test with this
		#	$adjustedServerTime = strtotime("2017-09-04 12:31:31");

		$anchorDateOfThisMenu = strtotime($this->menu_start);
		$month = date("n", $anchorDateOfThisMenu);
		$year = date("Y", $anchorDateOfThisMenu);

		$cutOff = mktime(0, 0, 0, $month + 1, 7, $year);

		$currentUserID = CUser::getCurrentUser()->id;
		$allowedUserArray = array(
			400252,
			662598,
			907086
		);

		if ($adjustedServerTime > $cutOff && !in_array($currentUserID, $allowedUserArray))
		{
			return false; // menu is expired
		}

		return true;
	}

	// get menu by Y-m-01  (anchor date)
	static function getMenuByAnchorDate($Ymd)
	{
		$Menu = DAO_CFactory::create('menu');
		$Menu->query("SELECT * FROM menu WHERE menu_start = '" . $Ymd . "' AND is_deleted = 0");
		$Menu->fetch();

		return $Menu->toArray();
	}

	// get menu by Y-m-d
	static function getMenuByDate($Ymd)
	{
		$DAO_menu = DAO_CFactory::create('menu');
		$DAO_menu->whereAdd("menu.global_menu_end_date >= '" . $Ymd . "'");
		$DAO_menu->orderBy("menu.global_menu_end_date");
		$DAO_menu->limit(1);
		$DAO_menu->find(true);

		return $DAO_menu->toArray();
	}

	/*
	 * Get any month greater than or equal to the current month by abbreviated month string
	 */
	static function getMenuByMonthAbbr($month = false)
	{
		// if no month set it to the current month
		// xss query safety check, check if month string is longer than 3 characters or not alphabetic
		if (!$month || strlen($month) > 3 || !ctype_alpha($month))
		{
			$month = strtolower(date('M'));
		}

		$DAO_menu = DAO_CFactory::create('menu');
		$DAO_menu->whereAdd("LOWER(DATE_FORMAT(menu.menu_start, '%b')) = '" . $month . "'");
		$DAO_menu->whereAdd("menu.menu_start >= DATE_SUB(LAST_DAY(NOW()), INTERVAL DAY(LAST_DAY(NOW()))-1 DAY)");
		$DAO_menu->orderBy("menu.id");
		$DAO_menu->limit(1);
		$DAO_menu->find(true);

		return $DAO_menu;
	}

	//gets menu ids that will be included in timeframe +/- a range, default range is +/- 1 month
	static function getMenuIdsInDateRange($YmdStart, $YmdEnd, $range = '1 months')
	{

		$timestamp = strtotime("-" . $range, strtotime($YmdStart));
		$YmdStart = date("Y-m-d", $timestamp);

		$timestamp = strtotime("+" . $range, strtotime($YmdEnd));
		$YmdEnd = date("Y-m-d", $timestamp);

		$Menu = DAO_CFactory::create('menu');
		$q = "SELECT id FROM menu WHERE global_menu_start_date >= '" . $YmdStart . " 00:00:00' AND global_menu_end_date < '" . $YmdEnd . " 23:59:59' AND is_deleted = 0";

		$Menu->query($q);
		$ids = array();
		while ($Menu->fetch())
		{
			$ids[] = $Menu->id;
		}

		return implode($ids, ',');
	}

	// get menu by Y-m-01  (anchor date)
	static function getMenuIDByAnchorDate($Ymd)
	{
		$Menu = DAO_CFactory::create('menu');
		$Menu->menu_start = $Ymd;
		$Menu->find(true);

		return $Menu->id;
	}

	static function getMenuInfo($menu_id)
	{
		$menuObj = DAO_CFactory::create('menu');
		$menuObj->id = $menu_id;
		$menuObj->find(true);

		return $menuObj->toArray();
	}

	static function getMenuShortNameById($menu_id)
	{
		$menuObj = DAO_CFactory::create('menu');
		$menuObj->id = $menu_id;
		$menuObj->find(true);

		$name = $menuObj->menu_name;
		$menuNameParts = explode(' ', trim($name));

		return $menuNameParts[0];
	}

	static function getSpecificMenuArray($ids)
	{
		$instance = DAO_CFactory::create('menu');
		$today = date('Y-m-d');

		$instance->query("select *
			from menu where id in (" . $ids . ") and is_deleted = 0
			order by global_menu_end_date asc");

		$retVal = array();
		$lastStart = false;
		$counter = 0;

		while ($instance->fetch())
		{
			if (!$lastStart)
			{
				$tempMenu = DAO_CFactory::create('menu');
				$tempMenu->id = $instance->id - 1;
				$tempMenu->selectAdd();
				$tempMenu->selectAdd("global_menu_end_date");

				if ($tempMenu->find(true))
				{
					$lastStart = strtotime($tempMenu->global_menu_end_date) + 90000;
				}
				else
				{
					$lastStart = strtotime($today);
				}
			}

			$retVal[$instance->id] = array(
				'id' => $instance->id,
				'position' => $counter++,
				'name' => $instance->menu_name,
				'anchor' => $instance->menu_start,
				'description' => $instance->menu_description,
				'start_date' => $lastStart,
				'end_date' => strtotime($instance->global_menu_end_date),
				'menu_name' => $instance->menu_name,
				'menu_name_abbr' => $instance->menu_name_abbr,
				'menu_month' => date('F', strtotime($instance->menu_name)),
				'menu_start' => $instance->menu_start,
				'menu_description' => $instance->menu_description,
				'global_menu_end_date' => $instance->global_menu_end_date,
				'global_menu_start_date' => $instance->global_menu_start_date
			);

			$lastStart = strtotime($instance->global_menu_end_date) + 90000;
		}

		return $retVal;
	}

	static function getActiveMenuArray($thisMenuOnly = false)
	{
		$instance = DAO_CFactory::create('menu');
		$today = date('Y-m-d');

		if ($thisMenuOnly)
		{
			$instance->query("select *
				from menu where DATE(global_menu_end_date) >= '$today' and is_active = 1 and id = $thisMenuOnly and is_deleted = 0
				order by global_menu_end_date asc");
		}
		else
		{
			$instance->query("select *
				from menu where DATE(global_menu_end_date) >= '$today' and is_active = 1 and is_deleted = 0
				order by global_menu_end_date asc");
		}

		$retVal = array();
		$lastStart = false;
		$counter = 0;

		while ($instance->fetch())
		{
			if (!$lastStart)
			{
				$tempMenu = DAO_CFactory::create('menu');
				$tempMenu->id = $instance->id - 1;
				$tempMenu->selectAdd();
				$tempMenu->selectAdd("global_menu_end_date");

				if ($tempMenu->find(true))
				{
					$lastStart = strtotime($tempMenu->global_menu_end_date) + 90000;
				}
				else
				{
					$lastStart = strtotime($today);
				}
			}

			$retVal[$instance->id] = array(
				'id' => $instance->id,
				'position' => $counter++,
				'name' => $instance->menu_name,
				'anchor' => $instance->menu_start,
				'description' => $instance->menu_description,
				'start_date' => $lastStart,
				'end_date' => strtotime($instance->global_menu_end_date),
				'menu_name' => $instance->menu_name,
				'menu_name_abbr' => $instance->menu_name_abbr,
				'menu_month' => date('F', strtotime($instance->menu_name)),
				'menu_start' => $instance->menu_start,
				'menu_description' => $instance->menu_description,
				'global_menu_end_date' => $instance->global_menu_end_date,
				'global_menu_start_date' => $instance->global_menu_start_date
			);

			$lastStart = strtotime($instance->global_menu_end_date) + 90000;
		}

		return $retVal;
	}

	static function getCurrentAndFutureDeliveredMenuObj()
	{
		$date = CTemplate::formatDateTime('Y-m-d');

		$menuArray = self::getCurrentAndFutureMenuObj('-1 month');

		$deliveredMenuArray = array();

		if (!empty($menuArray))
		{
			foreach ($menuArray as $menu)
			{
				if ($date < CTemplate::formatDateTime('Y-m-d', $menu->global_menu_end_date, false, 'next thursday'))
				{
					$deliveredMenuArray[$menu->id] = $menu;
				}
			}
		}

		return $deliveredMenuArray;
	}

	static function getCurrentAndFutureMenuObj($modify = false)
	{
		$date = CTemplate::formatDateTime('Y-m-d');

		if ($modify)
		{
			$date = CTemplate::formatDateTime('Y-m-d', false, false, $modify);
		}

		$menu = DAO_CFactory::create('menu');
		$menu->whereAdd("DATE(menu.global_menu_end_date) >= '" . $date . "'");
		$menu->orderBy("menu.global_menu_end_date");

		$menuArray = array();

		if ($menu->find())
		{
			while ($menu->fetch())
			{
				$menuArray[$menu->id] = clone $menu;
			}
		}

		return $menuArray;
	}

	static function getCurrentAndFutureMenuArray()
	{
		$instance = DAO_CFactory::create('menu');
		$today = date('Y-m-d');

		if (date('j') < 7)
		{
			// must return previous month as well
			$today = date('Y-m-d', mktime(0, 0, 0, date('m') - 1, date('j'), date('Y')));
		}

		$instance->query("select id, menu_name, global_menu_end_date, global_menu_start_date, menu_start from menu where DATE(global_menu_end_date) >= '$today' and is_deleted = 0 order by global_menu_end_date asc");
		$retVal = array();

		while ($instance->fetch())
		{
			$retVal[$instance->id] = array(
				'name' => $instance->menu_name,
				'start' => $instance->global_menu_start_date,
				'end' => $instance->global_menu_end_date,
				'anchor' => $instance->menu_start,
				'id' => $instance->id,
				'menu_name' => $instance->menu_name,
				'menu_name_abbr' => $instance->menu_name_abbr,
				'global_menu_start_date' => $instance->global_menu_start_date,
				'global_menu_end_date' => $instance->global_menu_end_date,
				'menu_start' => $instance->menu_start
			);
		}

		return $retVal;
	}

	static function getCurrentAndFutureMenuArrayOld()
	{
		$instance = DAO_CFactory::create('menu');
		$today = date('Y-m-d');
		if (date('j') < 7)
		{
			// must return previous month as well
			$today = date('Y-m-d', mktime(0, 0, 0, date('m') - 1, date('j'), date('Y')));
		}
		$instance->query("select id, menu_name from menu where DATE(global_menu_end_date) >= '$today' and is_deleted = 0 order by global_menu_end_date asc");
		$retVal = array();
		while ($instance->fetch())
		{
			$retVal[$instance->id] = $instance->menu_name;
		}

		return $retVal;
	}

	static function getLastXMenus($x_number_of_menus = 10, $active_only = false)
	{
		$active_only_query = "";
		if ($active_only)
		{
			$active_only_query = " AND is_active = '1' ";
		}
		$menu = DAO_CFactory::create('menu');
		$menu->query("SELECT * FROM menu WHERE is_deleted = '0' " . $active_only_query . "
			ORDER BY id DESC
			LIMIT " . $x_number_of_menus);
		$menuArray = array();
		while ($menu->fetch())
		{
			$menuArray[$menu->id] = clone($menu);
		}

		return $menuArray;
	}

	// Use in conjunction with getActiveMenuArray - you must pass in the last active menu to be sure that menus left with display_as_coming_soon set to true are not inadverdently returned
	static function getComingSoonMenuArray($greaterThanMenuID)
	{
		$instance = DAO_CFactory::create('menu');
		/*
		$instance->query("select m.id, m.menu_name, menu_start, m.global_menu_end_date, count(mmi.id) as 'num_items' from menu m " .
			"right join menu_to_menu_item mmi on m.id = mmi.menu_id and mmi.store_id is null " .
			"where DATE(m.global_menu_end_date) >= '$today' and m.is_active = 0 and m.is_deleted = 0 group by mmi.menu_id order by m.global_menu_end_date asc");
		*/
		$instance->query("select id, menu_name, menu_description, menu_start, global_menu_end_date from menu" . " where id >= $greaterThanMenuID and display_as_coming_soon = 1 and is_active = 0 order by global_menu_end_date asc");
		//" where id >= $greaterThanMenuID and display_as_coming_soon = 1 and is_deleted = 0 and is_active = 0 order by global_menu_end_date asc");
		$retVal = array();
		$today = date('Y-m-d');
		$lastStart = false;
		$counter = 0;
		while ($instance->fetch())
		{
			if (!$lastStart)
			{
				$tempMenu = DAO_CFactory::create('menu');
				$tempMenu->id = $instance->id - 1;
				$tempMenu->selectAdd();
				$tempMenu->selectAdd("global_menu_end_date");
				if ($tempMenu->find(true))
				{
					$lastStart = strtotime($tempMenu->global_menu_end_date) + 86400;
				}
				else
				{
					$lastStart = strtotime($today);
				}
			}
			$retVal[$instance->id] = array(
				'id' => $instance->id,
				'position' => $counter++,
				'name' => $instance->menu_name,
				'anchor' => $instance->menu_start,
				'start_date' => $lastStart,
				'end_date' => strtotime($instance->global_menu_end_date),
				'description' => $instance->menu_description
			);
			$lastStart = strtotime($instance->global_menu_end_date) + 86400;
		}

		return $retVal;
	}

	static function getNextMenuTimestamp($currentMenuID)
	{
		$menuObj = DAO_CFactory::create('menu');
		$currentMenuID++;
		$menuObj->query("select menu_start from menu where id = $currentMenuID");
		if ($menuObj->N == 0)
		{
			return false;
		}
		$menuObj->fetch();
		$timeStamp = strtotime($menuObj->menu_start);

		return $timeStamp;
	}

	// assumes $this is fully formed and uses the menu_start column to find the next menu in chronological sequence and
	// return the menu id if found or false if not.
	function getNextMenuID()
	{
		if ($this->menu_start)
		{
			$menuStartTS = strtotime($this->menu_start);
			$year = date("Y", $menuStartTS);
			$month = date("m", $menuStartTS);
			$new_date = mktime(0, 0, 0, $month, 1, $year);
			$new_date_sql = date("Y-m-d", $new_date);
			$nextMenu = DAO_CFactory::create('menu');
			$nextMenu->whereAdd(" menu_start = DATE_ADD('$new_date_sql',INTERVAL 1 MONTH) ");
			if ($nextMenu->find(true))
			{
				return $nextMenu->id;
			}
		}

		return false;
	}

	function findForMonthAndYear($Month, $Year)
	{
		$current_date = mktime(0, 0, 0, $Month, 1, $Year);
		$current_date_sql = date("Y-m-d", $current_date);
		$this->whereAdd(" menu_start = DATE('$current_date_sql') ");

		return $this->find();
	}

	function isTimeStampLegalForMenu($inTimeStamp)
	{
		if (!empty($this->menu_start))
		{
			//CApp::instance()->template()->assign( 'TSLFM', $this );  // DEBUG BUGBUG
			// DETERMINE MENU RANGE
			// ---------------------
			$startofValidPeriod = $endofValidPeriod = 0;
			$this->getValidMenuRange($startofValidPeriod, $endofValidPeriod);
			// VALIDATE THE DATE AGAINST THE RANGE
			// -------------------------------------
			if ($inTimeStamp >= $startofValidPeriod && $inTimeStamp < $endofValidPeriod)
			{
				return true;
			}
		}
		else
		{
			throw new Exception("isTimeStampLegalForMenu called on uninitialized CMenu object.");
		}

		return false;
	}

	function getValidMenuRange(&$tsBegin, &$tsEnd)
	{
		// STEP 1: GET GLOBAL MENU END DATES
		// -----------------------------------
		// End date for given month/year
		$dtMenuEndCurrent = $this->getGlobalMenuEndDate($this->menu_start);
		// End date for given month/year minus one (this determines the beginning)
		list($szYear, $szMonth, $szDay) = explode('-', $this->menu_start);
		$szYear = (int)$szYear;
		$szMonth = ((int)$szMonth) - 1;
		if ($szMonth < 1)
		{
			$szMonth = 12;
			$szYear--;
		}
		$dtMenuEndPrevious = $this->getGlobalMenuEndDate("$szYear-$szMonth-01");
		// STEP 2: DETERMINE RANGE
		// -------------------------
		// menu start
		if (strlen($dtMenuEndPrevious))
		{
			$menuStartTS = strtotime($dtMenuEndPrevious);
			$menuStartTS += 86400;
		}
		else
		{
			$menuStartTS = strtotime($this->menu_start);
			$menuStartTS -= (86400 * 10);
		}
		$tsBegin = $menuStartTS;
		// menu end
		if (strlen($dtMenuEndCurrent) > 0)
		{
			// CES 2-1-07: Add seconds to take valid end range through the end of the day (midnight minus 10 secs)
			$endofValidPeriod = strtotime($dtMenuEndCurrent) + 86390;
		}
		else
		{
			$menuStartTS = strtotime($this->menu_start);
			$daysInMonth = date('t', $menuStartTS);
			$endofValidPeriod = $menuStartTS + (86400 * ($daysInMonth + 10));
			$endofValidPeriod -= 10;  // drop 10 seconds to ensure we dont end up on day 7
		}
		$tsEnd = $endofValidPeriod;
	}

	// get array of menus and information about them
	static function menuInfoArray($selected_date = false, $active_only = false, $sort = 'DESC', $num_past_months = 12, $require_menu_items = false)
	{
		$todaysMonth = date("n");
		$todaysYear = date("Y");
		$currentMonthDate = date("Y-m-01");
		$active_only_query = "";
		if ($active_only)
		{
			$active_only_query = "AND m1.active = '1'";
		}
		$require_menu_items_query = '';
		if ($require_menu_items)
		{
			$require_menu_items_query = 'JOIN menu_to_menu_item on m1.id = menu_to_menu_item.menu_id';
		}
		if ($selected_date)
		{
			$selected_date = date('Y-m-d', $selected_date);
		}
		$startMonth = $todaysMonth - $num_past_months;
		$startYear = $todaysYear;
		if ($startMonth <= 0)
		{
			$startMonth += 12;
			$startYear--;
		}
		$start_date = mktime(0, 0, 0, $startMonth, 1, $startYear);
		$start_date_sql = date("Y-m-d", $start_date);
		// Get menu info
		$Menu = DAO_CFactory::create('menu');
		$Menu->query("SELECT m1.*,
				DATE_ADD(m2.global_menu_end_date, INTERVAL 1 DAY) AS global_menu_start_date
				FROM menu AS m1
				" . $require_menu_items_query . "
				LEFT JOIN menu AS m2 ON m2.id + 1 = m1.id
				WHERE m1.menu_start >= '" . $start_date_sql . "'
				" . $active_only_query . "
				AND m1.is_deleted = '0'
				GROUP BY m1.id
				ORDER BY m1.id " . $sort);
		$menu_array = array();
		$last_global_menu_end_date = 0;
		while ($Menu->fetch())
		{
			$menu_array[$Menu->id] = $Menu->toArray();
			$menu_array[$Menu->id]['month_year'] = CTemplate::dateTimeFormat($Menu->menu_start, MONTH_YEAR);
			$menu_array[$Menu->id]['year_month'] = substr(CTemplate::dateTimeFormat($Menu->menu_start, YEAR_MONTH_DAY), 0, -3);
			$menu_array[$Menu->id]['year_month_day'] = CTemplate::dateTimeFormat($Menu->menu_start, YEAR_MONTH_DAY);
			$menu_array[$Menu->id]['selected_date'] = false;
			if (empty($last_global_menu_end_date))
			{
				$last_global_menu_end_date = $Menu->global_menu_end_date;
			}
			if ($selected_date)
			{
				if ($selected_date > $last_global_menu_end_date && $selected_date <= $Menu->global_menu_end_date)
				{
					$menu_array[$Menu->id]['selected_date'] = true;
				}
			}
			else if ($currentMonthDate == $menu_array[$Menu->id]['year_month_day'])
			{
				$menu_array[$Menu->id]['selected_date'] = true;
			}
			$last_global_menu_end_date = $menu_array[$Menu->id]['global_menu_end_date'];
		}

		return $menu_array;
	}





	//
	// Author: David Benson
	// Date: 11/07/2006
	//
	// Expects date in YYYY-MM-DD format
	// Returns global_menu_end_date for the given month/year or empty sz on error
	// (note: day (DD) usually defaults to 01 and is basically not used here)
	//
	// ==================================================================================
	static function getGlobalMenuEndDate($szDate)
	{
		$bError = false;
		$result = '';
		list($szYear, $szMonth, $szDay) = explode('-', $szDate);
		$iYear = (int)$szYear;
		$iMonth = (int)$szMonth;
		// sanity check month
		if (($iMonth > 0) && ($iMonth < 13))
		{
			$szMonth = sprintf("%02d", $iMonth);
		}
		else
		{
			$bError = true;
		}
		// force the year to be four digits
		$szYear = sprintf("%04d", $iYear);
		if (!$bError)
		{
			$objMenu = DAO_CFactory::create('menu');
			$objMenu->menu_start = "$szYear-$szMonth-01";
			if (1 < $objMenu->find(true))
			{
				throw new Exception("Error: Found more than one menu for given month!");
			}
			else
			{
				$result = $objMenu->global_menu_end_date;
			}
		}

		return $result;
	}
}

?>